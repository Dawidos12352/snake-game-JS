{"mappings":"AAEA,IAEIA,EACAC,EAEAC,EACAC,EAAY,KAEZC,EAAW,GACXC,EAAU,GACVC,EAAQ,EAEZ,MAAMC,EAAkB,CAACC,EAAM,EAAGC,EAAMC,KAC7BC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,GAsBxD,SAASM,IACLX,EAAW,GACXH,EAAMe,UAAY,GAClBb,EAAY,GACZI,EAAQ,EAER,IAAK,IAAIU,EAAI,EAAGA,GA1CF,GA0CkBA,IAAK,CACjC,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,OACpB,IAAI,IAAIC,EAAI,EAAGA,EA7CL,GA6CoBA,IAAK,CAC/B,MAAMC,EAASL,SAASC,cAAc,OACtCI,EAAOH,UAAUC,IAAI,QACrBE,EAAOC,UAAY,GAAGF,OAAON,IAEzBd,EAAUoB,KACVpB,EAAUoB,GAAK,IAEnBpB,EAAUoB,GAAGN,GAAKO,EAClBN,EAAMQ,OAAOF,E,CAEjBvB,EAAMyB,OAAOR,E,CAtCjBb,EAAW,CACP,CAACkB,EAAIX,KAAKC,MAAMF,MAAgBM,EAAGL,KAAKC,MAAMF,QAG/B,MACnB,IAAIY,EACAN,EAEJ,GACIM,EAAIf,IACJS,EAAIT,UACAH,EAASsB,MAAKC,GAAMA,EAAGL,IAAMA,GAAKK,EAAGX,IAAMA,KACnDX,EAAQiB,EAAIA,EACZjB,EAAQW,EAAIA,CAAC,EA6BjBY,GAEI3B,EAAW4B,aAAY,KACnBC,IACAC,GAAa,GA/DI,I,CAmEzB,MAAMD,EAAyB,KAEnB1B,EAASA,EAAS4B,OAAQ,GAAGV,EAC7BlB,EAASA,EAAS4B,OAAQ,GAAGhB,EAErC,IAAI,IAAIiB,EAAI7B,EAAS4B,OAAQ,EAAGC,GAAK,EAAGA,IAAI,CACxC,MAAMC,EAAM9B,EAAS6B,GACZ,IAANA,IACkB,OAAd9B,IACC+B,EAAIlB,GAAK,GAEI,SAAdb,IACC+B,EAAIlB,GAAK,GAEI,SAAdb,IACC+B,EAAIlB,GAAK,GAEI,UAAdb,IACC+B,EAAIlB,GAAK,G,GAMnBe,EAAc,KAChB7B,EAAUiC,SAASC,IACfA,EAAID,SAASE,IACTA,EAAKjB,UAAY,MAAM,GACzB,IAENhB,EAAS+B,SAAQ,EAACb,EAACA,EAACN,EAAEA,MAClBd,EAAUoB,GAAGN,GAAGI,UAAUC,IAAI,QAAQ,IAG1CnB,EAAUG,EAAQiB,GAAGjB,EAAQW,GAAGI,UAAUC,IAAI,OAAO,EAKzDiB,OAAOC,iBAAiB,QAAS,KAC5BvC,EAAQkB,SAASsB,cAAc,UAEhC1B,GAAW,IAGfI,SAASqB,iBAAiB,WAAYE,IAClC,OAAOA,EAAEC,MACL,IAAK,UACmCvC,EAAY,KAChD,MACJ,IAAK,YACiCA,EAAY,OAC9C,MACJ,IAAK,YACoCA,EAAY,OACjD,MACJ,IAAK,aACmCA,EAAY,Q","sources":["src/index.js"],"sourcesContent":["\nconst GAME_SIZE = 21;\nlet DIFFICULTY_LOOP_MS = 100;\n\nlet board;\nlet gameLoop;\n\nlet gameBoard;\nlet direction = \"up\";\nlet lastAppliedDirection;\nlet snakePos = [];\nlet foodPos = {};\nlet score = 0;\n\nconst randomCordinate = (min = 1, max = GAME_SIZE - 2 ) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nconst resetSnakePosition = () => {\n    snakePos = [\n        {x : Math.floor(GAME_SIZE / 2), y: Math.floor(GAME_SIZE / 2)}\n    ];\n};\nconst generateNewFood =() => {\n    let x;\n    let y;\n\n    do {\n        x = randomCordinate()\n        y = randomCordinate()\n    } while(snakePos.find(el => el.x === x && el.y === y));\n    foodPos.x = x;\n    foodPos.y = y;\n\n}\n\n\nfunction startGame(){\n    direction =\"\";\n    board.innerHTML = ''; \n    gameBoard = [];\n    score = 0;\n\n    for (let y = 0; y <= GAME_SIZE; y ++){\n        const rowEl = document.createElement(\"div\")\n        rowEl.classList.add(\"row\")\n        for(let x = 0; x < GAME_SIZE; x++) {\n            const cellEl = document.createElement(\"div\")\n            cellEl.classList.add(\"cell\")\n            cellEl.innerText = `${x} / ${y}`\n\n            if(!gameBoard[x]){\n                gameBoard[x] = []\n            }\n            gameBoard[x][y] = cellEl\n            rowEl.append(cellEl)\n        }\n        board.append(rowEl)\n    }\n\nresetSnakePosition()\ngenerateNewFood()\n\n    gameLoop = setInterval(() => {\n        calculateSnakePosition()\n        updateBoard();\n    }, DIFFICULTY_LOOP_MS)\n}\n\nconst calculateSnakePosition = () => {\n    const lastSegmentPosition = {\n        x : snakePos[snakePos.length -1].x,\n        y : snakePos[snakePos.length -1].y,\n    }\n    for(let i = snakePos.length -1; i >= 0; i--){\n        const pos = snakePos[i]\n        if(i === 0){\n            if(direction === \"up\"){\n                pos.y -= 1;\n            }\n            if(direction === \"left\"){\n                pos.y -= 1;\n            }\n            if(direction === \"down\"){\n                pos.y -= 1;\n            }\n            if(direction === \"right\"){\n                pos.y -= 1;\n            }\n        }\n    }\n} \n\nconst updateBoard = () => {\n    gameBoard.forEach((row) => {\n        row.forEach((cell) => {\n            cell.classList = \"cell\"\n        })\n    });\n    snakePos.forEach(({x, y}) => {\n        gameBoard[x][y].classList.add(\"snake\")\n    })\n\n    gameBoard[foodPos.x][foodPos.y].classList.add(\"food\")\n\n\n}\n\nwindow.addEventListener(\"load\" , () => {\n     board = document.querySelector(\"#board\")\n    \n    startGame();\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n    switch(e.code) {\n        case 'ArrowUp' :\n            if(lastAppliedDirection !== \"down\") direction = \"up\";\n            break;\n        case 'ArrowDown' :\n            if(lastAppliedDirection !== \"up\") direction = \"down\";\n            break;\n        case 'ArrowLeft' :\n            if(lastAppliedDirection !== \"right\") direction = \"left\";\n            break;\n        case 'ArrowRight' :\n            if(lastAppliedDirection !== \"left\") direction = \"right\";\n            break;\n    }\n})"],"names":["$1f0dc3b9307be026$var$board","$1f0dc3b9307be026$var$gameLoop","$1f0dc3b9307be026$var$gameBoard","$1f0dc3b9307be026$var$direction","$1f0dc3b9307be026$var$snakePos","$1f0dc3b9307be026$var$foodPos","$1f0dc3b9307be026$var$score","$1f0dc3b9307be026$var$randomCordinate","min","max","$1f0dc3b9307be026$var$GAME_SIZE","Math","floor","random","$1f0dc3b9307be026$var$startGame","innerHTML","y","rowEl","document","createElement","classList","add","x","cellEl","innerText","append","find","el","$1f0dc3b9307be026$var$generateNewFood","setInterval","$1f0dc3b9307be026$var$calculateSnakePosition","$1f0dc3b9307be026$var$updateBoard","length","i","pos","forEach","row","cell","window","addEventListener","querySelector","e","code"],"version":3,"file":"index.ded6dc39.js.map"}