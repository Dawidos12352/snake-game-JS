{"mappings":"YACA,IAGIA,EAGAC,EANEC,EAAY,GAOdC,EAAY,KAEZC,EAAW,GACXC,EAAU,GAGRC,EAAkB,W,IAACC,EAAGC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGE,EAAGF,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAGN,GACpC,OAAOS,KAAKC,MAAMD,KAAKE,UAAYH,EAAMH,EAAM,GAAKA,E,EAsBxD,SAASO,IACLX,EAAW,GACXH,EAAMe,UAAY,GAClBd,EAAY,GACJ,EAER,IAAK,IAAIe,EAAI,EAAGA,GAAKd,EAAWc,IAAK,CACjC,IAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,OACpB,IAAI,IAAIC,EAAI,EAAGA,EAAIpB,EAAWoB,IAAK,CAC/B,IAAMC,EAASL,SAASC,cAAc,OACtCI,EAAOH,UAAUC,IAAI,QACrBE,EAAOC,UAAY,GAAUC,OAAPH,EAAE,OAAOG,OAAFT,GAEzBf,EAAUqB,KACVrB,EAAUqB,GAAK,IAEnBrB,EAAUqB,GAAGN,GAAKO,EAClBN,EAAMS,OAAOH,E,CAEjBvB,EAAM0B,OAAOT,E,CAtCjBb,EAAW,CACP,CAACkB,EAAIX,KAAKC,MAAMV,MAAgBc,EAAGL,KAAKC,MAAMV,QAG/B,WACnB,IAAIoB,EACAN,EAEJ,GACIM,EAAIhB,IACJU,EAAIV,UACAF,EAASuB,MAAK,SAAAC,G,OAAMA,EAAGN,IAAMA,GAAKM,EAAGZ,IAAMA,C,KACnDX,EAAQiB,EAAIA,EACZjB,EAAQW,EAAIA,C,CA6BhBa,GAEeC,aAAY,WACnBC,IACAC,G,GA/DiB,I,CAmEzB,IAAMD,EAAyB,WAEnB3B,EAASA,EAASK,OAAQ,GAAGa,EAC7BlB,EAASA,EAASK,OAAQ,GAAGO,EAErC,IAJA,IAIQiB,EAAI7B,EAASK,OAAQ,EAAGwB,GAAK,EAAGA,IAAI,CACxC,IAAMC,EAAM9B,EAAS6B,GACZ,IAANA,IACkB,OAAd9B,IACC+B,EAAIlB,GAAK,GAEI,SAAdb,IACC+B,EAAIlB,GAAK,GAEI,SAAdb,IACC+B,EAAIlB,GAAK,GAEI,UAAdb,IACC+B,EAAIlB,GAAK,G,GAMnBgB,EAAc,WAChB/B,EAAUkC,SAAQ,SAACC,GACfA,EAAID,SAAQ,SAACE,GACTA,EAAKjB,UAAY,M,OAGzBhB,EAAS+B,SAAQ,SAAAG,G,IAAEhB,EAACgB,EAADhB,EAAGN,EAACsB,EAADtB,EAClBf,EAAUqB,GAAGN,GAAGI,UAAUC,IAAI,Q,IAGlCpB,EAAUI,EAAQiB,GAAGjB,EAAQW,GAAGI,UAAUC,IAAI,O,EAKlDkB,OAAOC,iBAAiB,QAAS,WAC5BxC,EAAQkB,SAASuB,cAAc,UAEhC3B,G,IAGJI,SAASsB,iBAAiB,WAAW,SAACE,GAClC,OAAOA,EAAEC,MACL,IAAK,UACmCxC,EAAY,KAChD,MACJ,IAAK,YACiCA,EAAY,OAC9C,MACJ,IAAK,YACoCA,EAAY,OACjD,MACJ,IAAK,aACmCA,EAAY,Q","sources":["src/index.js"],"sourcesContent":["\nconst GAME_SIZE = 21;\nlet DIFFICULTY_LOOP_MS = 100;\n\nlet board;\nlet gameLoop;\n\nlet gameBoard;\nlet direction = \"up\";\nlet lastAppliedDirection;\nlet snakePos = [];\nlet foodPos = {};\nlet score = 0;\n\nconst randomCordinate = (min = 1, max = GAME_SIZE - 2 ) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nconst resetSnakePosition = () => {\n    snakePos = [\n        {x : Math.floor(GAME_SIZE / 2), y: Math.floor(GAME_SIZE / 2)}\n    ];\n};\nconst generateNewFood =() => {\n    let x;\n    let y;\n\n    do {\n        x = randomCordinate()\n        y = randomCordinate()\n    } while(snakePos.find(el => el.x === x && el.y === y));\n    foodPos.x = x;\n    foodPos.y = y;\n\n}\n\n\nfunction startGame(){\n    direction =\"\";\n    board.innerHTML = ''; \n    gameBoard = [];\n    score = 0;\n\n    for (let y = 0; y <= GAME_SIZE; y ++){\n        const rowEl = document.createElement(\"div\")\n        rowEl.classList.add(\"row\")\n        for(let x = 0; x < GAME_SIZE; x++) {\n            const cellEl = document.createElement(\"div\")\n            cellEl.classList.add(\"cell\")\n            cellEl.innerText = `${x} / ${y}`\n\n            if(!gameBoard[x]){\n                gameBoard[x] = []\n            }\n            gameBoard[x][y] = cellEl\n            rowEl.append(cellEl)\n        }\n        board.append(rowEl)\n    }\n\nresetSnakePosition()\ngenerateNewFood()\n\n    gameLoop = setInterval(() => {\n        calculateSnakePosition()\n        updateBoard();\n    }, DIFFICULTY_LOOP_MS)\n}\n\nconst calculateSnakePosition = () => {\n    const lastSegmentPosition = {\n        x : snakePos[snakePos.length -1].x,\n        y : snakePos[snakePos.length -1].y,\n    }\n    for(let i = snakePos.length -1; i >= 0; i--){\n        const pos = snakePos[i]\n        if(i === 0){\n            if(direction === \"up\"){\n                pos.y -= 1;\n            }\n            if(direction === \"left\"){\n                pos.y -= 1;\n            }\n            if(direction === \"down\"){\n                pos.y -= 1;\n            }\n            if(direction === \"right\"){\n                pos.y -= 1;\n            }\n        }\n    }\n} \n\nconst updateBoard = () => {\n    gameBoard.forEach((row) => {\n        row.forEach((cell) => {\n            cell.classList = \"cell\"\n        })\n    });\n    snakePos.forEach(({x, y}) => {\n        gameBoard[x][y].classList.add(\"snake\")\n    })\n\n    gameBoard[foodPos.x][foodPos.y].classList.add(\"food\")\n\n\n}\n\nwindow.addEventListener(\"load\" , () => {\n     board = document.querySelector(\"#board\")\n    \n    startGame();\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n    switch(e.code) {\n        case 'ArrowUp' :\n            if(lastAppliedDirection !== \"down\") direction = \"up\";\n            break;\n        case 'ArrowDown' :\n            if(lastAppliedDirection !== \"up\") direction = \"down\";\n            break;\n        case 'ArrowLeft' :\n            if(lastAppliedDirection !== \"right\") direction = \"left\";\n            break;\n        case 'ArrowRight' :\n            if(lastAppliedDirection !== \"left\") direction = \"right\";\n            break;\n    }\n})"],"names":["$b8f9b7833fa37166$var$board","$b8f9b7833fa37166$var$gameBoard","$b8f9b7833fa37166$var$GAME_SIZE","$b8f9b7833fa37166$var$direction","$b8f9b7833fa37166$var$snakePos","$b8f9b7833fa37166$var$foodPos","$b8f9b7833fa37166$var$randomCordinate","min","arguments","length","max","Math","floor","random","$b8f9b7833fa37166$var$startGame","innerHTML","y","rowEl","document","createElement","classList","add","x","cellEl","innerText","concat","append","find","el","$b8f9b7833fa37166$var$generateNewFood","setInterval","$b8f9b7833fa37166$var$calculateSnakePosition","$b8f9b7833fa37166$var$updateBoard","i","pos","forEach","row","cell","param","window","addEventListener","querySelector","e","code"],"version":3,"file":"index.55a07b22.js.map"}